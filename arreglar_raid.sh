#!/bin/bash

# Dispositivo RAID a reparar
RAID_DEVICE="/dev/md0"
# Punto de montaje final (necesario para desmontar antes de manipular)
MOUNT_POINT="/mnt/raid/files"

# Nombre del dispositivo del NUEVO disco de reemplazo
# DEBES EJECUTAR ESTE SCRIPT AS√ç: sudo ./arreglar_raid.sh /dev/sdX
# donde /dev/sdX es el nuevo disco que has conectado.
NEW_DISK="$1"

# --- Validaciones iniciales ---

if [ -z "$NEW_DISK" ]; then
    echo "‚ùå ERROR: Debes especificar el dispositivo del disco nuevo a a√±adir."
    echo "Uso: sudo ./arreglar_raid.sh /dev/sdX (ej: sudo ./arreglar_raid.sh /dev/sde)"
    exit 1
fi

if [ ! -b "$NEW_DISK" ]; then
    echo "‚ùå ERROR: El dispositivo $NEW_DISK no existe. Verifica con lsblk."
    exit 1
fi

# Verificar si el dispositivo RAID existe y est√° reconocido por mdadm
if ! sudo mdadm --detail "$RAID_DEVICE" > /dev/null 2>&1; then
    echo "‚ùå ERROR: El dispositivo RAID $RAID_DEVICE no existe o no est√° configurado."
    echo "Este script es para reparar un array existente."
    exit 1
fi

echo "üöÄ Iniciando proceso para a√±adir el nuevo disco $NEW_DISK al array $RAID_DEVICE..."

# --- Detener servicios y desmontar ---

# Detener servicios que puedan estar usando el punto de montaje del RAID
echo "‚úã Deteniendo servicios que puedan usar $MOUNT_POINT (nginx, docker)..."
# Usamos 2>/dev/null para suprimir errores si los servicios no existen o no est√°n corriendo
sudo systemctl stop nginx docker 2>/dev/null
sudo systemctl daemon-reload
sleep 2 # Dar tiempo a los servicios para detenerse

# Desmontar el sistema de archivos del RAID
echo "Desmontando el sistema de archivos en $MOUNT_POINT..."
# mountpoint -q verifica silenciosamente si un directorio es un punto de montaje
if mountpoint -q "$MOUNT_POINT"; then
    # Intenta desmontaje normal primero
    sudo umount "$MOUNT_POINT"
    if [ $? -ne 0 ]; then
        echo "‚ö†Ô∏è Advertencia: No se pudo desmontar $MOUNT_POINT limpiamente. Intentando desmontaje 'lazy'."
        # Desmontaje "lazy" si algo todav√≠a lo est√° usando
        sudo umount -l "$MOUNT_POINT"
        sleep 2
        # Verificar de nuevo si todav√≠a est√° montado
        if mountpoint -q "$MOUNT_POINT"; then
             echo "‚ùå ERROR: No se pudo desmontar $MOUNT_POINT. Est√° ocupado. Usa 'lsof $MOUNT_POINT' o 'fuser -m $MOUNT_POINT' para identificar el proceso."
             # Intenta reiniciar servicios antes de salir si falla el desmontaje
             echo "‚ñ∂Ô∏è Intentando reiniciar servicios antes de salir..."
             sudo systemctl start nginx docker 2>/dev/null
             exit 1
         fi
    fi
    echo "‚úÖ $MOUNT_POINT desmontado con √©xito."
else
    echo "‚ö†Ô∏è $MOUNT_POINT no estaba montado. Continuando."
fi

# --- Preparar el nuevo disco ---

echo "‚ö†Ô∏è Limpiando el nuevo disco $NEW_DISK para asegurar que no tiene datos o firmas previas..."
# wipefs es crucial para eliminar superbloques de RAID o sistemas de archivos antiguos
sudo wipefs -a -f "$NEW_DISK" || { echo "‚ùå ERROR en wipefs $NEW_DISK"; exit 1; }
# Opcional: Sobreescribir el inicio del disco para mayor seguridad (limpiar tablas de partici√≥n, etc.)
echo "‚úçÔ∏è Sobrescribiendo inicio del nuevo disco $NEW_DISK..."
sudo dd if=/dev/zero of="$NEW_DISK" bs=1M count=100 status=progress || { echo "‚ùå ERROR en dd $NEW_DISK"; exit 1; }
sudo partprobe "$NEW_DISK" 2>/dev/null # Informa al kernel de cambios en la tabla de particiones (eliminada)
sleep 3 # Da tiempo al kernel

# --- A√±adir el nuevo disco y reconstruir ---

echo "üîç Estado actual del array $RAID_DEVICE antes de a√±adir el disco:"
sudo mdadm --detail "$RAID_DEVICE" || echo "‚ö†Ô∏è No se pudo obtener detalles del RAID. Continuando..."

echo "‚ûï A√±adiendo el nuevo disco $NEW_DISK al array $RAID_DEVICE..."
# mdadm --manage --add a√±adir√° el disco y comenzar√° la reconstrucci√≥n autom√°ticamente si el array est√° degradado
sudo mdadm --manage "$RAID_DEVICE" --add "$NEW_DISK"
ADD_STATUS=$?

if [ $ADD_STATUS -ne 0 ]; then
    echo "‚ùå ERROR: Fall√≥ al a√±adir el disco $NEW_DISK al RAID $RAID_DEVICE."
    echo "Revisa la salida de mdadm y el estado del array con 'sudo mdadm --detail $RAID_DEVICE'."
    # Intenta remontar y reiniciar servicios antes de salir si falla la adici√≥n del disco
    echo "‚§¥Ô∏è Intentando remontar y reiniciar servicios antes de salir..."
    sudo mount "$RAID_DEVICE" "$MOUNT_POINT" 2>/dev/null
    sudo systemctl start nginx docker 2>/dev/null
    exit 1
fi

echo "‚úÖ Disco $NEW_DISK a√±adido al RAID $RAID_DEVICE. La reconstrucci√≥n (resync) deber√≠a haber comenzado."

# Esperar a que la reconstrucci√≥n termine
echo "‚è≥ Esperando a que la reconstrucci√≥n del RAID termine. Esto puede tardar varias horas, dependiendo del tama√±o de los discos."
# Espera mientras el estado del array contenga "resync" o "recovery"
while cat /proc/mdstat 2>/dev/null | grep -q "$RAID_DEVICE" && cat /proc/mdstat 2>/dev/null | grep -q "resync\|recovery"; do
   echo "Reconstruyendo: $(cat /proc/mdstat 2>/dev/null | grep "^$RAID_DEVICE :")"
   sleep 30 # Espera 30 segundos entre comprobaciones
done

# --- Verificaci√≥n final ---

echo "üîç Verificando estado final del array $RAID_DEVICE despu√©s de la reconstrucci√≥n:"
sudo mdadm --detail "$RAID_DEVICE" || echo "‚ö†Ô∏è No se pudo obtener detalles finales del RAID."

# Verificar si el array est√° en estado limpio y con todos los discos activos ([UUU] para 3 discos)
if ! cat /proc/mdstat 2>/dev/null | grep -q "^$RAID_DEVICE :.*\[UUU\]"; then
    echo "‚ùå ERROR: El array $RAID_DEVICE no alcanz√≥ el estado [UUU] despu√©s de la reconstrucci√≥n."
    echo "Inspecciona 'sudo mdadm --detail $RAID_DEVICE' y '/proc/mdstat' para diagnosticar."
    # No salimos con √©xito si el estado final no es limpio
    # Intentamos remontar y reiniciar servicios de todas formas
    echo "‚§¥Ô∏è Intentando remontar y reiniciar servicios a pesar del estado final..."
    sudo mount "$RAID_DEVICE" "$MOUNT_POINT" 2>/dev/null
    sudo systemctl start nginx docker 2>/dev/null
    exit 1 # Salir con c√≥digo de error
fi

echo "‚úÖ Reconstrucci√≥n del array $RAID_DEVICE completada con √©xito. Estado [UUU]."

# --- Remontar y reiniciar servicios ---

echo "‚§¥Ô∏è Remontando el sistema de archivos en $MOUNT_POINT..."
sudo mount "$RAID_DEVICE" "$MOUNT_POINT"
 if [ $? -ne 0 ]; then
    echo "‚ùå ERROR: Fall√≥ el montaje de $RAID_DEVICE en $MOUNT_POINT despu√©s de la reparaci√≥n."
    # Intenta reiniciar servicios antes de salir si falla el montaje
    echo "‚ñ∂Ô∏è Intentando reiniciar servicios antes de salir..."
    sudo systemctl start nginx docker 2>/dev/null
    exit 1
fi
echo "‚úÖ RAID remontado con √©xito."

# Reiniciar servicios que se detuvieron
echo "‚ñ∂Ô∏è Reiniciando servicios (nginx, docker)..."
# Usamos 'start' por si acaso no estaban corriendo inicialmente
sudo systemctl start nginx docker 2>/dev/null
echo "‚úÖ Servicios iniciados."

echo "üéâ Proceso de reparaci√≥n del RAID $RAID_DEVICE completado (disco $NEW_DISK a√±adido y reconstrucci√≥n finalizada)."
echo "Verifica el estado final con 'sudo mdadm --detail $RAID_DEVICE' y 'cat /proc/mdstat'."

exit 0 # Salir con √©xito si todo el proceso de reparaci√≥n (a√±adir disco) ha sido exitoso